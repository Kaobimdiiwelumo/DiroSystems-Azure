"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAzureCosmosDbProviders = void 0;
const cosmos_1 = require("@azure/cosmos");
const cosmos_db_decorators_1 = require("./cosmos-db.decorators");
const cosmos_db_utils_1 = require("./cosmos-db.utils");
function createAzureCosmosDbProviders(connectionName, models = []) {
    const providers = (models || []).map((model) => ({
        provide: (0, cosmos_db_utils_1.getModelToken)(model.dto.name),
        useFactory: (database) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const entityDescriptor = Reflect.getMetadata(cosmos_db_decorators_1.AZURE_COSMOS_DB_ENTITY, model.dto);
            const partitionKey = entityDescriptor ? entityDescriptor.PartitionKey : null;
            const containerName = (_a = model.collection) !== null && _a !== void 0 ? _a : (0, cosmos_db_utils_1.pluralize)(model.dto.name);
            const containerOptions = {
                id: containerName,
                uniqueKeyPolicy: {
                    uniqueKeys: [],
                },
            };
            if (Object.values(entityDescriptor).indexOf('DateTime') > -1) {
                containerOptions.indexingPolicy = {
                    includedPaths: [
                        {
                            path: `/*`,
                            indexes: [
                                {
                                    kind: cosmos_1.IndexKind.Range,
                                    dataType: cosmos_1.DataType.String,
                                    precision: -1,
                                },
                            ],
                        },
                    ],
                };
            }
            for (const key in entityDescriptor) {
                if (entityDescriptor.hasOwnProperty(key)) {
                    const element = entityDescriptor[key];
                    if (element === 'UniqueKey') {
                        containerOptions.uniqueKeyPolicy.uniqueKeys.push({ paths: [`/${key}`] });
                    }
                }
            }
            if (partitionKey != null) {
                containerOptions.partitionKey = {
                    paths: [`/${partitionKey}`],
                };
            }
            const coResponse = yield database.containers.createIfNotExists(containerOptions);
            return coResponse.container;
        }),
        inject: [(0, cosmos_db_utils_1.getConnectionToken)(connectionName)],
    }));
    return providers;
}
exports.createAzureCosmosDbProviders = createAzureCosmosDbProviders;
//# sourceMappingURL=cosmos-db.providers.js.map