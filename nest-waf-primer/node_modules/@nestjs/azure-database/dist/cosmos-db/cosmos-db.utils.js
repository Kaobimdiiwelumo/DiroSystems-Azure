"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluralize = exports.handleRetry = exports.getConnectionToken = exports.getModelToken = void 0;
const common_1 = require("@nestjs/common");
const operators_1 = require("rxjs/operators");
const cosmos_db_constants_1 = require("./cosmos-db.constants");
function getModelToken(model) {
    return `${model}AzureCosmosDbModel`;
}
exports.getModelToken = getModelToken;
function getConnectionToken(name) {
    return name && name !== cosmos_db_constants_1.DEFAULT_DB_CONNECTION ? `${name}AzureCosmosDbConnection` : cosmos_db_constants_1.DEFAULT_DB_CONNECTION;
}
exports.getConnectionToken = getConnectionToken;
function handleRetry(retryAttempts = 9, retryDelay = 3000) {
    return (source) => source.pipe((0, operators_1.retryWhen)((e) => e.pipe((0, operators_1.scan)((errorCount, error) => {
        common_1.Logger.error(`Unable to connect to the cosmos db database. Retrying (${errorCount + 1})...`, '', 'AzureCosmosDbModule');
        if (errorCount + 1 >= retryAttempts) {
            throw error;
        }
        return errorCount + 1;
    }, 0), (0, operators_1.delay)(retryDelay))));
}
exports.handleRetry = handleRetry;
const pluralization = [
    [/(m)an$/gi, '$1en'],
    [/(pe)rson$/gi, '$1ople'],
    [/(child)$/gi, '$1ren'],
    [/^(ox)$/gi, '$1en'],
    [/(ax|test)is$/gi, '$1es'],
    [/(octop|vir)us$/gi, '$1i'],
    [/(alias|status)$/gi, '$1es'],
    [/(bu)s$/gi, '$1ses'],
    [/(buffal|tomat|potat)o$/gi, '$1oes'],
    [/([ti])um$/gi, '$1a'],
    [/sis$/gi, 'ses'],
    [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'],
    [/(hive)$/gi, '$1s'],
    [/([^aeiouy]|qu)y$/gi, '$1ies'],
    [/(x|ch|ss|sh)$/gi, '$1es'],
    [/(matr|vert|ind)ix|ex$/gi, '$1ices'],
    [/([m|l])ouse$/gi, '$1ice'],
    [/(kn|w|l)ife$/gi, '$1ives'],
    [/(quiz)$/gi, '$1zes'],
    [/s$/gi, 's'],
    [/([^a-z])$/, '$1'],
    [/$/gi, 's'],
];
const rules = pluralization;
const uncountables = [
    'advice',
    'energy',
    'excretion',
    'digestion',
    'cooperation',
    'health',
    'justice',
    'labour',
    'machinery',
    'equipment',
    'information',
    'pollution',
    'sewage',
    'paper',
    'money',
    'species',
    'series',
    'rain',
    'rice',
    'fish',
    'sheep',
    'moose',
    'deer',
    'news',
    'expertise',
    'status',
    'media',
];
function pluralize(str) {
    let found;
    str = str.toLowerCase();
    if (!~uncountables.indexOf(str)) {
        found = rules.filter((rule) => {
            return str.match(rule[0]);
        });
        if (found[0]) {
            return str.replace(found[0][0], found[0][1]);
        }
    }
    return str;
}
exports.pluralize = pluralize;
//# sourceMappingURL=cosmos-db.utils.js.map