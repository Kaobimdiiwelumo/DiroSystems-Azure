"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectConnection = exports.InjectModel = exports.CosmosUniqueKey = exports.CosmosDateTime = exports.CosmosPartitionKey = exports.AZURE_COSMOS_DB_ENTITY = void 0;
const common_1 = require("@nestjs/common");
const cosmos_db_utils_1 = require("./cosmos-db.utils");
exports.AZURE_COSMOS_DB_ENTITY = 'cosmos-db:entity';
function validateType(annotationType, target, propertyKey) {
    if (propertyKey) {
        const propertyType = Reflect.getMetadata('design:type', target, propertyKey);
        let propertyTypeName = '';
        if (annotationType === 'DateTime') {
            propertyTypeName = Date.name;
        }
        else if (annotationType === 'UniqueKey') {
            propertyTypeName = String.name;
        }
        else {
            throw new Error(`Type ${annotationType} is not supported.`);
        }
        if (propertyTypeName.toLowerCase().includes(propertyType.name.toLocaleLowerCase()) === false) {
            throw new Error(`EDM type of "${target.constructor.name}.${propertyKey}" is ${annotationType}. The equivalent of ${annotationType} is ${propertyTypeName}. ` +
                `"${propertyKey}" should be of type ${propertyTypeName}. Got ${propertyType.name}`);
        }
    }
}
function annotate(value, type) {
    return (target, propertyKey) => {
        validateType(type, target, propertyKey);
        const isPropertyAnnotation = typeof propertyKey === 'string';
        target = isPropertyAnnotation ? target.constructor : target;
        const storedEntityDescriptor = Reflect.getMetadata(exports.AZURE_COSMOS_DB_ENTITY, target) || {};
        let entityDescriptor = Object.assign({}, storedEntityDescriptor);
        if (isPropertyAnnotation) {
            entityDescriptor = Object.assign({ [propertyKey]: type }, entityDescriptor);
        }
        else {
            const isPartitionKey = type === 'PartitionKey';
            if (isPartitionKey) {
                entityDescriptor = Object.assign(Object.assign({}, entityDescriptor), { [type]: value || propertyKey });
            }
        }
        Reflect.defineMetadata(exports.AZURE_COSMOS_DB_ENTITY, entityDescriptor, target);
    };
}
function CosmosPartitionKey(value) {
    return annotate(value, 'PartitionKey');
}
exports.CosmosPartitionKey = CosmosPartitionKey;
function CosmosDateTime(value) {
    return annotate(value, 'DateTime');
}
exports.CosmosDateTime = CosmosDateTime;
function CosmosUniqueKey(value) {
    return annotate(value, 'UniqueKey');
}
exports.CosmosUniqueKey = CosmosUniqueKey;
const InjectModel = (model) => (0, common_1.Inject)((0, cosmos_db_utils_1.getModelToken)(model.name));
exports.InjectModel = InjectModel;
const InjectConnection = (name) => (0, common_1.Inject)((0, cosmos_db_utils_1.getConnectionToken)(name));
exports.InjectConnection = InjectConnection;
//# sourceMappingURL=cosmos-db.decorators.js.map