import { AzureTableContinuationToken, AzureTableStorageQuery, AzureTableStorageResponse, AzureTableStorageResultList, Repository } from './azure-table.interface';
import { AzureTableStorageService } from './azure-table.service';
export declare class AzureTableStorageRepository<T> implements Repository<T> {
    private readonly manager;
    private readonly tableName;
    private _query;
    private get query();
    private set query(value);
    constructor(manager: AzureTableStorageService, tableName: string);
    select(...args: any[]): Repository<T>;
    top(top: number): Repository<T>;
    where(condition: string, ...args: any[]): Repository<T>;
    and(condition: string, ...args: any[]): Repository<T>;
    or(condition: string, ...args: any[]): Repository<T>;
    toQueryObject(): Object;
    findAll(tableQuery?: AzureTableStorageQuery, currentToken?: AzureTableContinuationToken): Promise<AzureTableStorageResultList<T>>;
    find(rowKey: string, entity: Partial<T>): Promise<T>;
    create(entity: T, rowKeyValue?: string): Promise<T>;
    update(rowKey: string, entity: Partial<T>): Promise<T>;
    delete(rowKey: string, entity: T): Promise<AzureTableStorageResponse>;
}
